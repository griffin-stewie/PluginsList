default_platform(:mac)

# When you use CocoaPods, Go to File -> Workspace Settings -> Advanced and select Legacy  https://stackoverflow.com/questions/29731884/xcode-build-setting-build-products-path-configuration-build-dir-is-a-lie

BUILD_DIR = "build"
FRAMEWORK_NAME = "PluginsList.framework"
LIB_NAME = "libPods-PluginsList.a"
PLUGIN_NAME = "PluginsList.sketchplugin"
WORKSPACE = "PluginsList.xcworkspace"
SCHEME = "PluginsList"

# Xcode の Workspace Settings で Advanced.... から Legacy を選択すること

platform :mac do
  desc "Build for development"
  lane :develop do
    configuration = "Debug"
    xcodebuild(
      clean: false,
      build: true,
      scheme: SCHEME,
      configuration: configuration,
      workspace: WORKSPACE,
      xcargs: "BUILD_FROM_FASTLANE=true"
    )

    File.expand_path(File.join("..", BUILD_DIR, configuration))
  end


  desc "Build framework"
  lane :build do
    configuration = "Release"
    xcodebuild(
      clean: true,
      build: true,
      scheme: SCHEME,
      configuration: configuration,
      workspace: WORKSPACE,
      xcargs: "BUILD_FROM_FASTLANE=true"
    )

    File.expand_path(File.join("..", BUILD_DIR, configuration))
  end

  desc "Package plugin, building framework unless provided"
  lane :package do |options|
    fastlane_require "fileutils"

    build_dir = options[:build_dir]
    unless build_dir
      build_dir = build
    end

    plugin_dir = File.join(build_dir, PLUGIN_NAME)
    FileUtils.rm_rf(plugin_dir)

    plugin_compressed_path = "#{plugin_dir}.zip"
    FileUtils.rm_f(plugin_compressed_path)

    FileUtils.mkdir_p(plugin_dir)

    contents_dir = File.join(plugin_dir, "Contents")
    FileUtils.mkdir_p(contents_dir)

    resources_dir = File.join(contents_dir, "Resources")
    FileUtils.mkdir_p(resources_dir)

    framework_dir = File.join(build_dir, FRAMEWORK_NAME)
    FileUtils.copy_entry(framework_dir, File.join(resources_dir, FRAMEWORK_NAME))
    framework_dir = File.join(build_dir, LIB_NAME)
    FileUtils.copy_entry(framework_dir, File.join(resources_dir, LIB_NAME))

    FileUtils.cp("../plugin/img/icon.png", resources_dir)

    sketch_dir = File.join(contents_dir, "Sketch")
    FileUtils.mkdir_p(sketch_dir)

    FileUtils.cp("../plugin/manifest.json", sketch_dir)
    FileUtils.cp("../plugin/src/index.js", sketch_dir)

    sh("ditto -c -k --rsrc --keepParent \"#{plugin_dir}\" \"#{plugin_compressed_path}\"")

    plugin_dir
  end

  desc "Package and install plugin to Sketch"
  lane :install do |options|
    fastlane_require "fileutils"

    plugin_dir = package(options)
    plugin_link = File.join(Dir.home, "Library", "Application Support", "com.bohemiancoding.sketch3", "Plugins", PLUGIN_NAME)

    FileUtils.rm_f(plugin_link)
    FileUtils.ln_s(plugin_dir, plugin_link)
  end

  desc "Publish and Package"
  lane :publish do |options|
    fastlane_require "fileutils"
    fastlane_require "json"
    fastlane_require "yaml"

    plugin_dir = package(options)
    FileUtils.cp_r(plugin_dir, "..", {:remove_destination => true})

    version = ""
    File.open("#{plugin_dir}/Contents/Sketch/manifest.json") do |j|
      hash = JSON.load(j)
      version = hash["version"]
    end

    if version.empty? then
      UI.error 'version is empty'
      next # skip doing the rest of this lane
    end

    puts "Current version in manifest.json is #{version}"

    sh("cd .. && skpm publish #{version} && cd -")

    FileUtils.rm_rf(File.join("..", PLUGIN_NAME))
  end

  desc "Notarize"
  lane :notarize_plugin do |options|
    fastlane_require "fileutils"
    fastlane_require "json"
    fastlane_require "yaml"
    fastlane_require "zip"
    fastlane_require "plist"

    skpmrc = YAML.load_file("../.skpmrc")
    notarization = skpmrc["notarization"]

    username = notarization["username"]
    password =  notarization["password"]

    zipfile = "../#{options[:zip]}"

    bundleID = ""
    Zip::File.open(zipfile) do |zip_file|
      # Handle entries one by one
      zip_file.each do |entry|
        # Extract to file/directory/symlink
        puts "Extracting #{entry.name}"
        # entry.extract(dest_file)

        if entry.name.end_with?("Info.plist") then
          # Read into memory
          entry.get_input_stream do |a|
            result = Plist.parse_xml(a)
            bundleID = result["CFBundleIdentifier"]
          end
        end
      end
    end

    if bundleID.empty? then
      UI.error 'bundleID is empty'
      next # skip doing the rest of this lane
    end

    puts bundleID

    notarization_info_response = sh("
      xcrun altool --notarize-app -f #{zipfile} --primary-bundle-id \"#{bundleID}\" -u \"#{username}\" -p \"#{password}\" --output-format xml
    ")

    notarization_info_plist = Plist.parse_xml(notarization_info_response)
    notarization_info = notarization_info_plist['notarization-info']

    log_url = notarization_info['LogFileURL']
    log_suffix = ''
    if log_url
      log_response = Net::HTTP.get(URI(log_url))
      log_json_object = JSON.parse(log_response)
      log_suffix = ", with log:\n#{JSON.pretty_generate(log_json_object)}"
    end

    case notarization_info['Status']
    when 'success'
      UI.message('Stapling package')

      sh("xcrun stapler staple \"#{package_path}\"")

      UI.success("Successfully notarized and stapled package#{log_suffix}")
    when 'invalid'
      UI.user_error!("Could not notarize package with message '#{notarization_info['Status Message']}'#{log_suffix}")
    else
      UI.crash!("Could not notarize package with status '#{notarization_info['Status']}'#{log_suffix}")
    end
  end
end
